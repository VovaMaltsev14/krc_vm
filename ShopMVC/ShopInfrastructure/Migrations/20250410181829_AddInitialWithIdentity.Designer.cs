// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopInfrastructure;

#nullable disable

namespace ShopInfrastructure.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20250410181829_AddInitialWithIdentity")]
    partial class AddInitialWithIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ct_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CtPrice")
                        .HasColumnType("int")
                        .HasColumnName("ct_price");

                    b.Property<int?>("CtQuantity")
                        .HasColumnType("int")
                        .HasColumnName("ct_quantity");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "unique_user_cart")
                        .IsUnique()
                        .HasFilter("[user_id] IS NOT NULL");

                    b.ToTable("carts", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cg_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CgDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("cg_description");

                    b.Property<string>("CgImage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("cg_image");

                    b.Property<string>("CgName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cg_name");

                    b.Property<string>("CgParentCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cg_parent_category");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parent_category_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("co_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("co_name");

                    b.HasKey("Id");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("mn_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("MnContactInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("mn_contact_info");

                    b.Property<string>("MnName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("mn_name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("manufacturers", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("od_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("OdDiscount")
                        .HasMaxLength(4)
                        .HasColumnType("float")
                        .HasColumnName("od_discount");

                    b.Property<string>("OdNotes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("od_notes");

                    b.Property<string>("OdPayment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("od_payment");

                    b.Property<decimal?>("OdTotal")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("od_total");

                    b.Property<string>("OdUser")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("od_user");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int")
                        .HasColumnName("receipt_id");

                    b.Property<int?>("ShippingId")
                        .HasColumnType("int")
                        .HasColumnName("shipping_id");

                    b.HasKey("Id");

                    b.HasIndex("OdUser");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("ShippingId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pd_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("PdAbout")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("pd_about");

                    b.Property<string>("PdDiscount")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pd_discount");

                    b.Property<string>("PdMeasurements")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("pd_measurements");

                    b.Property<string>("PdName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("pd_name");

                    b.Property<decimal?>("PdPrice")
                        .HasColumnType("money")
                        .HasColumnName("pd_price");

                    b.Property<int?>("PdQuantity")
                        .HasColumnType("int")
                        .HasColumnName("pd_quantity");

                    b.HasKey("Id")
                        .HasName("PK_product");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.ProductCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pc_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<decimal?>("PcPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("pc_price");

                    b.Property<int?>("PcQuantity")
                        .HasColumnType("int")
                        .HasColumnName("pc_quantity");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_carts", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pct_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("po_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<decimal?>("PoPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("po_price");

                    b.Property<int?>("PoQuantity")
                        .HasColumnType("int")
                        .HasColumnName("po_quantity");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_orders", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rp_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RpAbout")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rp_about");

                    b.Property<DateTime?>("RpDateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("rp_date_created");

                    b.Property<string>("RpDiscount")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("rp_discount");

                    b.Property<string>("RpPayment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rp_payment");

                    b.Property<int?>("RpQuantity")
                        .HasColumnType("int")
                        .HasColumnName("rp_quantity");

                    b.Property<decimal?>("RpTotal")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("rp_total");

                    b.Property<int?>("ShippingId")
                        .HasColumnType("int")
                        .HasColumnName("shipping_id");

                    b.HasKey("Id");

                    b.HasIndex("ShippingId");

                    b.ToTable("receipts", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.Shiping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sh_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("ShAdress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sh_adress");

                    b.Property<int?>("ShippingCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("shipping_company_id");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ShippingCompanyId");

                    b.ToTable("shipings", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.ShippingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sc_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ScAvgTimeNeed")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sc_avg_time_need");

                    b.Property<string>("ScName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sc_name");

                    b.Property<decimal?>("ScPricing")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("sc_pricing");

                    b.HasKey("Id");

                    b.ToTable("shipping_companies", (string)null);
                });

            modelBuilder.Entity("ShopDomain.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UrBirthdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UrCountryId")
                        .HasColumnType("int");

                    b.Property<string>("UrRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UrCountryId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ShopDomain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ShopDomain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopDomain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ShopDomain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopDomain.Model.Cart", b =>
                {
                    b.HasOne("ShopDomain.Model.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ShopDomain.Model.Cart", "UserId")
                        .HasConstraintName("FK_carts_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopDomain.Model.Category", b =>
                {
                    b.HasOne("ShopDomain.Model.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ShopDomain.Model.Manufacturer", b =>
                {
                    b.HasOne("ShopDomain.Model.Country", "Country")
                        .WithMany("Manufacturers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_manufacturers_countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ShopDomain.Model.Order", b =>
                {
                    b.HasOne("ShopDomain.Model.User", "OdUserNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("OdUser")
                        .HasConstraintName("FK_orders_users");

                    b.HasOne("ShopDomain.Model.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_orders_products");

                    b.HasOne("ShopDomain.Model.Receipt", "Receipt")
                        .WithMany("Orders")
                        .HasForeignKey("ReceiptId")
                        .HasConstraintName("FK_orders_receipts");

                    b.HasOne("ShopDomain.Model.Shiping", "Shipping")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingId")
                        .HasConstraintName("FK_orders_shipings");

                    b.Navigation("OdUserNavigation");

                    b.Navigation("Product");

                    b.Navigation("Receipt");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("ShopDomain.Model.Product", b =>
                {
                    b.HasOne("ShopDomain.Model.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("FK_products_manufacturers");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ShopDomain.Model.ProductCart", b =>
                {
                    b.HasOne("ShopDomain.Model.Cart", "Cart")
                        .WithMany("ProductCarts")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_product_carts_carts");

                    b.HasOne("ShopDomain.Model.Product", "Product")
                        .WithMany("ProductCarts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_product_carts_products");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopDomain.Model.ProductCategory", b =>
                {
                    b.HasOne("ShopDomain.Model.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_product_categories_categories_1");

                    b.HasOne("ShopDomain.Model.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_product_categories_products");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopDomain.Model.ProductOrder", b =>
                {
                    b.HasOne("ShopDomain.Model.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_product_orders_orders_1");

                    b.HasOne("ShopDomain.Model.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_product_orders_products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopDomain.Model.Receipt", b =>
                {
                    b.HasOne("ShopDomain.Model.Shiping", "Shipping")
                        .WithMany("Receipts")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_receipts_shipings");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("ShopDomain.Model.Shiping", b =>
                {
                    b.HasOne("ShopDomain.Model.Country", "Country")
                        .WithMany("Shipings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_shipings_countries");

                    b.HasOne("ShopDomain.Model.ShippingCompany", "ShippingCompany")
                        .WithMany("Shipings")
                        .HasForeignKey("ShippingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_shipings_shipping_companies");

                    b.Navigation("Country");

                    b.Navigation("ShippingCompany");
                });

            modelBuilder.Entity("ShopDomain.Model.User", b =>
                {
                    b.HasOne("ShopDomain.Model.Country", "UrCountry")
                        .WithMany("Users")
                        .HasForeignKey("UrCountryId");

                    b.Navigation("UrCountry");
                });

            modelBuilder.Entity("ShopDomain.Model.Cart", b =>
                {
                    b.Navigation("ProductCarts");
                });

            modelBuilder.Entity("ShopDomain.Model.Category", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ShopDomain.Model.Country", b =>
                {
                    b.Navigation("Manufacturers");

                    b.Navigation("Shipings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ShopDomain.Model.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopDomain.Model.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("ShopDomain.Model.Product", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductCarts");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("ShopDomain.Model.Receipt", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ShopDomain.Model.Shiping", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("ShopDomain.Model.ShippingCompany", b =>
                {
                    b.Navigation("Shipings");
                });

            modelBuilder.Entity("ShopDomain.Model.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
